// Code generated by protoc-gen-go.
// source: meta.proto
// DO NOT EDIT!

package proto

import proto1 "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal

// The request message containing the
type MetaRequest struct {
	Name  string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *MetaRequest) Reset()         { *m = MetaRequest{} }
func (m *MetaRequest) String() string { return proto1.CompactTextString(m) }
func (*MetaRequest) ProtoMessage()    {}

// The response message containing the status
type MetaReply struct {
	// reply status
	Status int32 `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
	// error message
	Error string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *MetaReply) Reset()         { *m = MetaReply{} }
func (m *MetaReply) String() string { return proto1.CompactTextString(m) }
func (*MetaReply) ProtoMessage()    {}

func init() {
}

// Client API for Meta service

type MetaClient interface {
	// update a meta info
	Put(ctx context.Context, in *MetaRequest, opts ...grpc.CallOption) (*MetaReply, error)
}

type metaClient struct {
	cc *grpc.ClientConn
}

func NewMetaClient(cc *grpc.ClientConn) MetaClient {
	return &metaClient{cc}
}

func (c *metaClient) Put(ctx context.Context, in *MetaRequest, opts ...grpc.CallOption) (*MetaReply, error) {
	out := new(MetaReply)
	err := grpc.Invoke(ctx, "/proto.Meta/Put", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Meta service

type MetaServer interface {
	// update a meta info
	Put(context.Context, *MetaRequest) (*MetaReply, error)
}

func RegisterMetaServer(s *grpc.Server, srv MetaServer) {
	s.RegisterService(&_Meta_serviceDesc, srv)
}

func _Meta_Put_Handler(srv interface{}, ctx context.Context, buf []byte) (interface{}, error) {
	in := new(MetaRequest)
	if err := proto1.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(MetaServer).Put(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Meta_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Meta",
	HandlerType: (*MetaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Put",
			Handler:    _Meta_Put_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
