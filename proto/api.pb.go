// Code generated by protoc-gen-go.
// source: api.proto
// DO NOT EDIT!

package proto

import proto1 "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal

type Worker struct {
	Id   string   `protobuf:"bytes,1,opt" json:"Id,omitempty"`
	Feed *Feed    `protobuf:"bytes,2,opt,name=feed" json:"feed,omitempty"`
	Job  *FeedJob `protobuf:"bytes,3,opt,name=job" json:"job,omitempty"`
}

func (m *Worker) Reset()         { *m = Worker{} }
func (m *Worker) String() string { return proto1.CompactTextString(m) }
func (*Worker) ProtoMessage()    {}

func (m *Worker) GetFeed() *Feed {
	if m != nil {
		return m.Feed
	}
	return nil
}

func (m *Worker) GetJob() *FeedJob {
	if m != nil {
		return m.Job
	}
	return nil
}

type FeedJob struct {
	Key       string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Id        string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	RemoteKey string `protobuf:"bytes,3,opt,name=remote_key" json:"remote_key,omitempty"`
	TargetId  string `protobuf:"bytes,4,opt,name=target_id" json:"target_id,omitempty"`
	Start     int32  `protobuf:"varint,5,opt,name=start" json:"start,omitempty"`
	PageSize  int32  `protobuf:"varint,6,opt,name=page_size" json:"page_size,omitempty"`
	Worker    string `protobuf:"bytes,7,opt,name=worker" json:"worker,omitempty"`
	Created   int64  `protobuf:"varint,8,opt,name=created" json:"created,omitempty"`
	Updated   int64  `protobuf:"varint,9,opt,name=updated" json:"updated,omitempty"`
	// uuid should always math target_id
	Uuid        string `protobuf:"bytes,10,opt,name=uuid" json:"uuid,omitempty"`
	Status      string `protobuf:"bytes,11,opt,name=status" json:"status,omitempty"`
	MaxLimit    int32  `protobuf:"varint,12,opt,name=max_limit" json:"max_limit,omitempty"`
	ForceUpdate bool   `protobuf:"varint,13,opt,name=force_update" json:"force_update,omitempty"`
	// translate to new service(sync) job
	Service *Service `protobuf:"bytes,14,opt,name=service" json:"service,omitempty"`
	Profile *Profile `protobuf:"bytes,15,opt,name=profile" json:"profile,omitempty"`
}

func (m *FeedJob) Reset()         { *m = FeedJob{} }
func (m *FeedJob) String() string { return proto1.CompactTextString(m) }
func (*FeedJob) ProtoMessage()    {}

func (m *FeedJob) GetService() *Service {
	if m != nil {
		return m.Service
	}
	return nil
}

func (m *FeedJob) GetProfile() *Profile {
	if m != nil {
		return m.Profile
	}
	return nil
}

type FeedSummary struct {
	Id          string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	EntryCount  int32  `protobuf:"varint,2,opt,name=entry_count" json:"entry_count,omitempty"`
	DateStart   string `protobuf:"bytes,3,opt,name=date_start" json:"date_start,omitempty"`
	DateEnd     string `protobuf:"bytes,4,opt,name=date_end" json:"date_end,omitempty"`
	ElapsedTime int32  `protobuf:"varint,5,opt,name=elapsed_time" json:"elapsed_time,omitempty"`
}

func (m *FeedSummary) Reset()         { *m = FeedSummary{} }
func (m *FeedSummary) String() string { return proto1.CompactTextString(m) }
func (*FeedSummary) ProtoMessage()    {}

type CommandRequest struct {
	Command string `protobuf:"bytes,1,opt,name=command" json:"command,omitempty"`
	Arg1    string `protobuf:"bytes,2,opt,name=arg1" json:"arg1,omitempty"`
	Arg2    string `protobuf:"bytes,3,opt,name=arg2" json:"arg2,omitempty"`
}

func (m *CommandRequest) Reset()         { *m = CommandRequest{} }
func (m *CommandRequest) String() string { return proto1.CompactTextString(m) }
func (*CommandRequest) ProtoMessage()    {}

type CommandResponse struct {
	Command string `protobuf:"bytes,1,opt,name=command" json:"command,omitempty"`
	Result  string `protobuf:"bytes,2,opt,name=result" json:"result,omitempty"`
}

func (m *CommandResponse) Reset()         { *m = CommandResponse{} }
func (m *CommandResponse) String() string { return proto1.CompactTextString(m) }
func (*CommandResponse) ProtoMessage()    {}

// placeholder - Always true, indicating the entity is the placeholder
// body - The text we use for the placeholder on FriendFeed, e.g., "3 more comments" for comments or "234 other people" for likes
// num - The number of comments or likes excluded. For example, if the body is "3 more comments", then num would be 3.
// Example: http://friendfeed-api.com/v2/feed/bret?maxcomments=auto&maxlikes=auto
type FeedRequest struct {
	Id       string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Start    int32  `protobuf:"varint,2,opt,name=start" json:"start,omitempty"`
	PageSize int32  `protobuf:"varint,3,opt,name=page_size" json:"page_size,omitempty"`
	// Include raw text entry and comment bodies in addition to the HTML bodies
	// included by default. The raw text bodies are available as rawBody on all
	// returned entries and comments. This also adds rawLink on all entries.
	Raw bool `protobuf:"varint,4,opt,name=raw" json:"raw,omitempty"`
	// NOTICE: this is not the same as original friendfeed api
	// auto should be default it not set.
	// if max_comments set to 1, then all comments should returned.
	MaxComments int32 `protobuf:"varint,5,opt,name=max_comments" json:"max_comments,omitempty"`
	MaxLikes    int32 `protobuf:"varint,6,opt,name=max_likes" json:"max_likes,omitempty"`
}

func (m *FeedRequest) Reset()         { *m = FeedRequest{} }
func (m *FeedRequest) String() string { return proto1.CompactTextString(m) }
func (*FeedRequest) ProtoMessage()    {}

type EntryRequest struct {
	Uuid string `protobuf:"bytes,1,opt,name=uuid" json:"uuid,omitempty"`
}

func (m *EntryRequest) Reset()         { *m = EntryRequest{} }
func (m *EntryRequest) String() string { return proto1.CompactTextString(m) }
func (*EntryRequest) ProtoMessage()    {}

type ProfileRequest struct {
	Uuid string `protobuf:"bytes,1,opt,name=uuid" json:"uuid,omitempty"`
}

func (m *ProfileRequest) Reset()         { *m = ProfileRequest{} }
func (m *ProfileRequest) String() string { return proto1.CompactTextString(m) }
func (*ProfileRequest) ProtoMessage()    {}

type LikeRequest struct {
	Entry string `protobuf:"bytes,1,opt,name=entry" json:"entry,omitempty"`
	User  string `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
	Like  bool   `protobuf:"varint,3,opt,name=like" json:"like,omitempty"`
}

func (m *LikeRequest) Reset()         { *m = LikeRequest{} }
func (m *LikeRequest) String() string { return proto1.CompactTextString(m) }
func (*LikeRequest) ProtoMessage()    {}

type CommentRequest struct {
	Entry   string   `protobuf:"bytes,1,opt,name=entry" json:"entry,omitempty"`
	Comment *Comment `protobuf:"bytes,2,opt,name=comment" json:"comment,omitempty"`
}

func (m *CommentRequest) Reset()         { *m = CommentRequest{} }
func (m *CommentRequest) String() string { return proto1.CompactTextString(m) }
func (*CommentRequest) ProtoMessage()    {}

func (m *CommentRequest) GetComment() *Comment {
	if m != nil {
		return m.Comment
	}
	return nil
}

type CommentDeleteRequest struct {
	Entry   string `protobuf:"bytes,1,opt,name=entry" json:"entry,omitempty"`
	Comment string `protobuf:"bytes,2,opt,name=comment" json:"comment,omitempty"`
	User    string `protobuf:"bytes,3,opt,name=user" json:"user,omitempty"`
}

func (m *CommentDeleteRequest) Reset()         { *m = CommentDeleteRequest{} }
func (m *CommentDeleteRequest) String() string { return proto1.CompactTextString(m) }
func (*CommentDeleteRequest) ProtoMessage()    {}

type ServiceRequest struct {
	User    string `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	Service string `protobuf:"bytes,2,opt,name=service" json:"service,omitempty"`
}

func (m *ServiceRequest) Reset()         { *m = ServiceRequest{} }
func (m *ServiceRequest) String() string { return proto1.CompactTextString(m) }
func (*ServiceRequest) ProtoMessage()    {}

func init() {
}

// Client API for Api service

type ApiClient interface {
	EnqueJob(ctx context.Context, in *FeedJob, opts ...grpc.CallOption) (*FeedJob, error)
	GetFeedJob(ctx context.Context, in *Worker, opts ...grpc.CallOption) (*FeedJob, error)
	FinishJob(ctx context.Context, in *FeedJob, opts ...grpc.CallOption) (*FeedJob, error)
	FetchProfile(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*Profile, error)
	FetchGraph(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*Graph, error)
	FetchFeedinfo(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*Feedinfo, error)
	PostFeedinfo(ctx context.Context, in *Feedinfo, opts ...grpc.CallOption) (*Profile, error)
	// A client-to-server streaming RPC.
	//
	// Accepts a stream of Entries on a feed being archived, returning a
	// FeedSummary when archving is completed.
	ArchiveFeed(ctx context.Context, opts ...grpc.CallOption) (Api_ArchiveFeedClient, error)
	ForceArchiveFeed(ctx context.Context, opts ...grpc.CallOption) (Api_ForceArchiveFeedClient, error)
	FetchFeed(ctx context.Context, in *FeedRequest, opts ...grpc.CallOption) (*Feed, error)
	// Entry page return Feed as well
	FetchEntry(ctx context.Context, in *EntryRequest, opts ...grpc.CallOption) (*Feed, error)
	PostEntry(ctx context.Context, in *Entry, opts ...grpc.CallOption) (*Entry, error)
	DeleteEntry(ctx context.Context, in *EntryRequest, opts ...grpc.CallOption) (*Entry, error)
	LikeEntry(ctx context.Context, in *LikeRequest, opts ...grpc.CallOption) (*Entry, error)
	CommentEntry(ctx context.Context, in *CommentRequest, opts ...grpc.CallOption) (*Entry, error)
	DeleteComment(ctx context.Context, in *CommentDeleteRequest, opts ...grpc.CallOption) (*Entry, error)
	PutOAuth(ctx context.Context, in *OAuthUser, opts ...grpc.CallOption) (*Profile, error)
	// rpc BindAuth(OAuthUser) returns (OAuthUser) {}
	BindUserFeed(ctx context.Context, in *OAuthUser, opts ...grpc.CallOption) (*OAuthUser, error)
	// service
	DeleteService(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*Feedinfo, error)
	Command(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandResponse, error)
}

type apiClient struct {
	cc *grpc.ClientConn
}

func NewApiClient(cc *grpc.ClientConn) ApiClient {
	return &apiClient{cc}
}

func (c *apiClient) EnqueJob(ctx context.Context, in *FeedJob, opts ...grpc.CallOption) (*FeedJob, error) {
	out := new(FeedJob)
	err := grpc.Invoke(ctx, "/proto.Api/EnqueJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetFeedJob(ctx context.Context, in *Worker, opts ...grpc.CallOption) (*FeedJob, error) {
	out := new(FeedJob)
	err := grpc.Invoke(ctx, "/proto.Api/GetFeedJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) FinishJob(ctx context.Context, in *FeedJob, opts ...grpc.CallOption) (*FeedJob, error) {
	out := new(FeedJob)
	err := grpc.Invoke(ctx, "/proto.Api/FinishJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) FetchProfile(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*Profile, error) {
	out := new(Profile)
	err := grpc.Invoke(ctx, "/proto.Api/FetchProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) FetchGraph(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*Graph, error) {
	out := new(Graph)
	err := grpc.Invoke(ctx, "/proto.Api/FetchGraph", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) FetchFeedinfo(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*Feedinfo, error) {
	out := new(Feedinfo)
	err := grpc.Invoke(ctx, "/proto.Api/FetchFeedinfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) PostFeedinfo(ctx context.Context, in *Feedinfo, opts ...grpc.CallOption) (*Profile, error) {
	out := new(Profile)
	err := grpc.Invoke(ctx, "/proto.Api/PostFeedinfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) ArchiveFeed(ctx context.Context, opts ...grpc.CallOption) (Api_ArchiveFeedClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Api_serviceDesc.Streams[0], c.cc, "/proto.Api/ArchiveFeed", opts...)
	if err != nil {
		return nil, err
	}
	x := &apiArchiveFeedClient{stream}
	return x, nil
}

type Api_ArchiveFeedClient interface {
	Send(*Entry) error
	CloseAndRecv() (*FeedSummary, error)
	grpc.ClientStream
}

type apiArchiveFeedClient struct {
	grpc.ClientStream
}

func (x *apiArchiveFeedClient) Send(m *Entry) error {
	return x.ClientStream.SendMsg(m)
}

func (x *apiArchiveFeedClient) CloseAndRecv() (*FeedSummary, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(FeedSummary)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *apiClient) ForceArchiveFeed(ctx context.Context, opts ...grpc.CallOption) (Api_ForceArchiveFeedClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Api_serviceDesc.Streams[1], c.cc, "/proto.Api/ForceArchiveFeed", opts...)
	if err != nil {
		return nil, err
	}
	x := &apiForceArchiveFeedClient{stream}
	return x, nil
}

type Api_ForceArchiveFeedClient interface {
	Send(*Entry) error
	CloseAndRecv() (*FeedSummary, error)
	grpc.ClientStream
}

type apiForceArchiveFeedClient struct {
	grpc.ClientStream
}

func (x *apiForceArchiveFeedClient) Send(m *Entry) error {
	return x.ClientStream.SendMsg(m)
}

func (x *apiForceArchiveFeedClient) CloseAndRecv() (*FeedSummary, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(FeedSummary)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *apiClient) FetchFeed(ctx context.Context, in *FeedRequest, opts ...grpc.CallOption) (*Feed, error) {
	out := new(Feed)
	err := grpc.Invoke(ctx, "/proto.Api/FetchFeed", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) FetchEntry(ctx context.Context, in *EntryRequest, opts ...grpc.CallOption) (*Feed, error) {
	out := new(Feed)
	err := grpc.Invoke(ctx, "/proto.Api/FetchEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) PostEntry(ctx context.Context, in *Entry, opts ...grpc.CallOption) (*Entry, error) {
	out := new(Entry)
	err := grpc.Invoke(ctx, "/proto.Api/PostEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) DeleteEntry(ctx context.Context, in *EntryRequest, opts ...grpc.CallOption) (*Entry, error) {
	out := new(Entry)
	err := grpc.Invoke(ctx, "/proto.Api/DeleteEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) LikeEntry(ctx context.Context, in *LikeRequest, opts ...grpc.CallOption) (*Entry, error) {
	out := new(Entry)
	err := grpc.Invoke(ctx, "/proto.Api/LikeEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) CommentEntry(ctx context.Context, in *CommentRequest, opts ...grpc.CallOption) (*Entry, error) {
	out := new(Entry)
	err := grpc.Invoke(ctx, "/proto.Api/CommentEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) DeleteComment(ctx context.Context, in *CommentDeleteRequest, opts ...grpc.CallOption) (*Entry, error) {
	out := new(Entry)
	err := grpc.Invoke(ctx, "/proto.Api/DeleteComment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) PutOAuth(ctx context.Context, in *OAuthUser, opts ...grpc.CallOption) (*Profile, error) {
	out := new(Profile)
	err := grpc.Invoke(ctx, "/proto.Api/PutOAuth", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) BindUserFeed(ctx context.Context, in *OAuthUser, opts ...grpc.CallOption) (*OAuthUser, error) {
	out := new(OAuthUser)
	err := grpc.Invoke(ctx, "/proto.Api/BindUserFeed", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) DeleteService(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*Feedinfo, error) {
	out := new(Feedinfo)
	err := grpc.Invoke(ctx, "/proto.Api/DeleteService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) Command(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandResponse, error) {
	out := new(CommandResponse)
	err := grpc.Invoke(ctx, "/proto.Api/Command", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Api service

type ApiServer interface {
	EnqueJob(context.Context, *FeedJob) (*FeedJob, error)
	GetFeedJob(context.Context, *Worker) (*FeedJob, error)
	FinishJob(context.Context, *FeedJob) (*FeedJob, error)
	FetchProfile(context.Context, *ProfileRequest) (*Profile, error)
	FetchGraph(context.Context, *ProfileRequest) (*Graph, error)
	FetchFeedinfo(context.Context, *ProfileRequest) (*Feedinfo, error)
	PostFeedinfo(context.Context, *Feedinfo) (*Profile, error)
	// A client-to-server streaming RPC.
	//
	// Accepts a stream of Entries on a feed being archived, returning a
	// FeedSummary when archving is completed.
	ArchiveFeed(Api_ArchiveFeedServer) error
	ForceArchiveFeed(Api_ForceArchiveFeedServer) error
	FetchFeed(context.Context, *FeedRequest) (*Feed, error)
	// Entry page return Feed as well
	FetchEntry(context.Context, *EntryRequest) (*Feed, error)
	PostEntry(context.Context, *Entry) (*Entry, error)
	DeleteEntry(context.Context, *EntryRequest) (*Entry, error)
	LikeEntry(context.Context, *LikeRequest) (*Entry, error)
	CommentEntry(context.Context, *CommentRequest) (*Entry, error)
	DeleteComment(context.Context, *CommentDeleteRequest) (*Entry, error)
	PutOAuth(context.Context, *OAuthUser) (*Profile, error)
	// rpc BindAuth(OAuthUser) returns (OAuthUser) {}
	BindUserFeed(context.Context, *OAuthUser) (*OAuthUser, error)
	// service
	DeleteService(context.Context, *ServiceRequest) (*Feedinfo, error)
	Command(context.Context, *CommandRequest) (*CommandResponse, error)
}

func RegisterApiServer(s *grpc.Server, srv ApiServer) {
	s.RegisterService(&_Api_serviceDesc, srv)
}

func _Api_EnqueJob_Handler(srv interface{}, ctx context.Context, buf []byte) (interface{}, error) {
	in := new(FeedJob)
	if err := proto1.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ApiServer).EnqueJob(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Api_GetFeedJob_Handler(srv interface{}, ctx context.Context, buf []byte) (interface{}, error) {
	in := new(Worker)
	if err := proto1.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ApiServer).GetFeedJob(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Api_FinishJob_Handler(srv interface{}, ctx context.Context, buf []byte) (interface{}, error) {
	in := new(FeedJob)
	if err := proto1.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ApiServer).FinishJob(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Api_FetchProfile_Handler(srv interface{}, ctx context.Context, buf []byte) (interface{}, error) {
	in := new(ProfileRequest)
	if err := proto1.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ApiServer).FetchProfile(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Api_FetchGraph_Handler(srv interface{}, ctx context.Context, buf []byte) (interface{}, error) {
	in := new(ProfileRequest)
	if err := proto1.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ApiServer).FetchGraph(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Api_FetchFeedinfo_Handler(srv interface{}, ctx context.Context, buf []byte) (interface{}, error) {
	in := new(ProfileRequest)
	if err := proto1.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ApiServer).FetchFeedinfo(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Api_PostFeedinfo_Handler(srv interface{}, ctx context.Context, buf []byte) (interface{}, error) {
	in := new(Feedinfo)
	if err := proto1.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ApiServer).PostFeedinfo(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Api_ArchiveFeed_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ApiServer).ArchiveFeed(&apiArchiveFeedServer{stream})
}

type Api_ArchiveFeedServer interface {
	SendAndClose(*FeedSummary) error
	Recv() (*Entry, error)
	grpc.ServerStream
}

type apiArchiveFeedServer struct {
	grpc.ServerStream
}

func (x *apiArchiveFeedServer) SendAndClose(m *FeedSummary) error {
	return x.ServerStream.SendMsg(m)
}

func (x *apiArchiveFeedServer) Recv() (*Entry, error) {
	m := new(Entry)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Api_ForceArchiveFeed_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ApiServer).ForceArchiveFeed(&apiForceArchiveFeedServer{stream})
}

type Api_ForceArchiveFeedServer interface {
	SendAndClose(*FeedSummary) error
	Recv() (*Entry, error)
	grpc.ServerStream
}

type apiForceArchiveFeedServer struct {
	grpc.ServerStream
}

func (x *apiForceArchiveFeedServer) SendAndClose(m *FeedSummary) error {
	return x.ServerStream.SendMsg(m)
}

func (x *apiForceArchiveFeedServer) Recv() (*Entry, error) {
	m := new(Entry)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Api_FetchFeed_Handler(srv interface{}, ctx context.Context, buf []byte) (interface{}, error) {
	in := new(FeedRequest)
	if err := proto1.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ApiServer).FetchFeed(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Api_FetchEntry_Handler(srv interface{}, ctx context.Context, buf []byte) (interface{}, error) {
	in := new(EntryRequest)
	if err := proto1.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ApiServer).FetchEntry(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Api_PostEntry_Handler(srv interface{}, ctx context.Context, buf []byte) (interface{}, error) {
	in := new(Entry)
	if err := proto1.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ApiServer).PostEntry(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Api_DeleteEntry_Handler(srv interface{}, ctx context.Context, buf []byte) (interface{}, error) {
	in := new(EntryRequest)
	if err := proto1.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ApiServer).DeleteEntry(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Api_LikeEntry_Handler(srv interface{}, ctx context.Context, buf []byte) (interface{}, error) {
	in := new(LikeRequest)
	if err := proto1.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ApiServer).LikeEntry(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Api_CommentEntry_Handler(srv interface{}, ctx context.Context, buf []byte) (interface{}, error) {
	in := new(CommentRequest)
	if err := proto1.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ApiServer).CommentEntry(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Api_DeleteComment_Handler(srv interface{}, ctx context.Context, buf []byte) (interface{}, error) {
	in := new(CommentDeleteRequest)
	if err := proto1.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ApiServer).DeleteComment(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Api_PutOAuth_Handler(srv interface{}, ctx context.Context, buf []byte) (interface{}, error) {
	in := new(OAuthUser)
	if err := proto1.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ApiServer).PutOAuth(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Api_BindUserFeed_Handler(srv interface{}, ctx context.Context, buf []byte) (interface{}, error) {
	in := new(OAuthUser)
	if err := proto1.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ApiServer).BindUserFeed(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Api_DeleteService_Handler(srv interface{}, ctx context.Context, buf []byte) (interface{}, error) {
	in := new(ServiceRequest)
	if err := proto1.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ApiServer).DeleteService(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Api_Command_Handler(srv interface{}, ctx context.Context, buf []byte) (interface{}, error) {
	in := new(CommandRequest)
	if err := proto1.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ApiServer).Command(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Api_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Api",
	HandlerType: (*ApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnqueJob",
			Handler:    _Api_EnqueJob_Handler,
		},
		{
			MethodName: "GetFeedJob",
			Handler:    _Api_GetFeedJob_Handler,
		},
		{
			MethodName: "FinishJob",
			Handler:    _Api_FinishJob_Handler,
		},
		{
			MethodName: "FetchProfile",
			Handler:    _Api_FetchProfile_Handler,
		},
		{
			MethodName: "FetchGraph",
			Handler:    _Api_FetchGraph_Handler,
		},
		{
			MethodName: "FetchFeedinfo",
			Handler:    _Api_FetchFeedinfo_Handler,
		},
		{
			MethodName: "PostFeedinfo",
			Handler:    _Api_PostFeedinfo_Handler,
		},
		{
			MethodName: "FetchFeed",
			Handler:    _Api_FetchFeed_Handler,
		},
		{
			MethodName: "FetchEntry",
			Handler:    _Api_FetchEntry_Handler,
		},
		{
			MethodName: "PostEntry",
			Handler:    _Api_PostEntry_Handler,
		},
		{
			MethodName: "DeleteEntry",
			Handler:    _Api_DeleteEntry_Handler,
		},
		{
			MethodName: "LikeEntry",
			Handler:    _Api_LikeEntry_Handler,
		},
		{
			MethodName: "CommentEntry",
			Handler:    _Api_CommentEntry_Handler,
		},
		{
			MethodName: "DeleteComment",
			Handler:    _Api_DeleteComment_Handler,
		},
		{
			MethodName: "PutOAuth",
			Handler:    _Api_PutOAuth_Handler,
		},
		{
			MethodName: "BindUserFeed",
			Handler:    _Api_BindUserFeed_Handler,
		},
		{
			MethodName: "DeleteService",
			Handler:    _Api_DeleteService_Handler,
		},
		{
			MethodName: "Command",
			Handler:    _Api_Command_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ArchiveFeed",
			Handler:       _Api_ArchiveFeed_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ForceArchiveFeed",
			Handler:       _Api_ForceArchiveFeed_Handler,
			ClientStreams: true,
		},
	},
}
