// Code generated by protoc-gen-go.
// source: feed.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	feed.proto
	api.proto

It has these top-level messages:
	OAuthUser
	Profile
	Graph
	V1Profile
	Feed
	Feedinfo
	Service
	Entry
	Comment
	Like
	Thumbnail
	File
	Via
	Location
*/
package proto

import proto1 "github.com/golang/protobuf/proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal

type FeedType int32

const (
	FeedType_user    FeedType = 0
	FeedType_group   FeedType = 1
	FeedType_special FeedType = 2
)

var FeedType_name = map[int32]string{
	0: "user",
	1: "group",
	2: "special",
}
var FeedType_value = map[string]int32{
	"user":    0,
	"group":   1,
	"special": 2,
}

func (x FeedType) String() string {
	return proto1.EnumName(FeedType_name, int32(x))
}

type StatusType int32

const (
	StatusType_private StatusType = 0
	StatusType_public  StatusType = 1
)

var StatusType_name = map[int32]string{
	0: "private",
	1: "public",
}
var StatusType_value = map[string]int32{
	"private": 0,
	"public":  1,
}

func (x StatusType) String() string {
	return proto1.EnumName(StatusType_name, int32(x))
}

type OAuthUser struct {
	Uuid string `protobuf:"bytes,1,opt,name=uuid" json:"uuid,omitempty"`
	// User info from oauth2 providers
	// sequence
	UserId string `protobuf:"bytes,2,opt,name=user_id" json:"user_id,omitempty"`
	// login
	Name              string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	NickName          string `protobuf:"bytes,4,opt,name=nick_name" json:"nick_name,omitempty"`
	AvaterUrl         string `protobuf:"bytes,5,opt,name=avater_url" json:"avater_url,omitempty"`
	Email             string `protobuf:"bytes,6,opt,name=email" json:"email,omitempty"`
	AccessToken       string `protobuf:"bytes,7,opt,name=access_token" json:"access_token,omitempty"`
	AccessTokenSecret string `protobuf:"bytes,10,opt,name=access_token_secret" json:"access_token_secret,omitempty"`
	Provider          string `protobuf:"bytes,8,opt,name=provider" json:"provider,omitempty"`
	RemoteKey         string `protobuf:"bytes,9,opt,name=remote_key" json:"remote_key,omitempty"`
}

func (m *OAuthUser) Reset()         { *m = OAuthUser{} }
func (m *OAuthUser) String() string { return proto1.CompactTextString(m) }
func (*OAuthUser) ProtoMessage()    {}

// id map
type Profile struct {
	// the FriendFeed UUID
	Uuid string `protobuf:"bytes,1,opt,name=uuid" json:"uuid,omitempty"`
	// v1 nicknameo or v2 id, in URL
	Id string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	// the user's full name, display name
	Name    string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Picture string `protobuf:"bytes,9,opt,name=picture" json:"picture,omitempty"`
	// One of "user", "group", or "special"
	Type string `protobuf:"bytes,4,opt,name=type" json:"type,omitempty"`
	// true if the feed is private
	Private bool `protobuf:"varint,5,opt,name=private" json:"private,omitempty"`
	// SUP (Simple Update Protocol)
	// https://code.google.com/p/simpleupdateprotocol/
	SupId       string `protobuf:"bytes,6,opt,name=sup_id" json:"sup_id,omitempty"`
	Description string `protobuf:"bytes,7,opt,name=description" json:"description,omitempty"`
	// TODO: remove this
	RemoteKey string `protobuf:"bytes,8,opt,name=remote_key" json:"remote_key,omitempty"`
	// mark deletion, will purge all related data later
	Deleted string `protobuf:"bytes,10,opt,name=deleted" json:"deleted,omitempty"`
}

func (m *Profile) Reset()         { *m = Profile{} }
func (m *Profile) String() string { return proto1.CompactTextString(m) }
func (*Profile) ProtoMessage()    {}

// social graph
type Graph struct {
	Subscribers   map[string]*Profile `protobuf:"bytes,1,rep,name=subscribers" json:"subscribers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Subscriptions map[string]*Profile `protobuf:"bytes,2,rep,name=subscriptions" json:"subscriptions,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Admins        map[string]*Profile `protobuf:"bytes,3,rep,name=admins" json:"admins,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Feeds         map[string]*Profile `protobuf:"bytes,4,rep,name=feeds" json:"feeds,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Services      map[string]*Service `protobuf:"bytes,5,rep,name=services" json:"services,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Graph) Reset()         { *m = Graph{} }
func (m *Graph) String() string { return proto1.CompactTextString(m) }
func (*Graph) ProtoMessage()    {}

func (m *Graph) GetSubscribers() map[string]*Profile {
	if m != nil {
		return m.Subscribers
	}
	return nil
}

func (m *Graph) GetSubscriptions() map[string]*Profile {
	if m != nil {
		return m.Subscriptions
	}
	return nil
}

func (m *Graph) GetAdmins() map[string]*Profile {
	if m != nil {
		return m.Admins
	}
	return nil
}

func (m *Graph) GetFeeds() map[string]*Profile {
	if m != nil {
		return m.Feeds
	}
	return nil
}

func (m *Graph) GetServices() map[string]*Service {
	if m != nil {
		return m.Services
	}
	return nil
}

// status - private or public
// id - the user's FriendFeed UUID
// name - the user's full name
// nickname - the user's FriendFeed nickname, used in FriendFeed URLs
// profileUrl - the user's profile URL on FriendFeed
// services[] - the services connected to the user's account
//   * id - the service's FriendFeed ID, e.g., "picasa"
//   * name - the service's official name, e.g., "Picasa Web Albums"
//   * url - the official URL of the service, e.g., http://picasaweb.google.com/
//   * iconUrl - the URL of the favicon for this service
//   * profileUrl? - the user's profile URL on this service, if any
//   * username? - the user's username for this service, if any
// subscriptions[] - the users this user is subscribed to
//   * id
//   * name
//   * nickname
//   * profileUrl
// rooms[] - the rooms this user is a member of
//   * id - the room's FriendFeed UUID
//   * name - the room's display name
//   * nickname - the room's FriendFeed nickname, used in FriendFeed URLs
//   * url - the room's URL on FriendFeed
// lists[] - the lists this user is a member of (only visible if authenticated as this user)
//   * id - the list's FriendFeed UUID
//   * name - the list's display name
//   * nickname - the list's FriendFeed nickname, used in FriendFeed URLs
//   * url - the list's URL on FriendFeed
type V1Profile struct {
	Status string `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	// FriendFeed UUID
	Id string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	// full name
	Name string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	// used in URL
	Nickname      string       `protobuf:"bytes,4,opt,name=nickname" json:"nickname,omitempty"`
	ProfileUrl    string       `protobuf:"bytes,5,opt,name=profileUrl" json:"profileUrl,omitempty"`
	Services      []*V1Profile `protobuf:"bytes,6,rep,name=services" json:"services,omitempty"`
	Subscriptions []*V1Profile `protobuf:"bytes,7,rep,name=subscriptions" json:"subscriptions,omitempty"`
	Rooms         []*V1Profile `protobuf:"bytes,8,rep,name=rooms" json:"rooms,omitempty"`
	Lists         []*V1Profile `protobuf:"bytes,9,rep,name=lists" json:"lists,omitempty"`
}

func (m *V1Profile) Reset()         { *m = V1Profile{} }
func (m *V1Profile) String() string { return proto1.CompactTextString(m) }
func (*V1Profile) ProtoMessage()    {}

func (m *V1Profile) GetServices() []*V1Profile {
	if m != nil {
		return m.Services
	}
	return nil
}

func (m *V1Profile) GetSubscriptions() []*V1Profile {
	if m != nil {
		return m.Subscriptions
	}
	return nil
}

func (m *V1Profile) GetRooms() []*V1Profile {
	if m != nil {
		return m.Rooms
	}
	return nil
}

func (m *V1Profile) GetLists() []*V1Profile {
	if m != nil {
		return m.Lists
	}
	return nil
}

// Feed
// id - The feed id, e.g., "bret" or "bret/comments"
// name - Display name of the feed, e.g., "Bret Taylor"
// sup_id - Simple Update Protocol
// description? - Profile description, an HTML string
// type - One of "user", "group", or "special"
// private - true if the feed is private.
// commands[]? - List of allowed commands for the authenticated user on this feed: "subscribe", "unsubscribe", "post", "dm", "admin"
//
// Full feeds have all of the fields above, plus the following field:
// entries[]{} - List of the entries in this feed.
type Feed struct {
	Uuid    string `protobuf:"bytes,1,opt,name=uuid" json:"uuid,omitempty"`
	Id      string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Name    string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Picture string `protobuf:"bytes,11,opt,name=picture" json:"picture,omitempty"`
	// SUP (Simple Update Protocol)
	// https://code.google.com/p/simpleupdateprotocol/
	SupId       string `protobuf:"bytes,4,opt,name=sup_id" json:"sup_id,omitempty"`
	Description string `protobuf:"bytes,5,opt,name=description" json:"description,omitempty"`
	// One of "user", "group", or "special"
	Type string `protobuf:"bytes,6,opt,name=type" json:"type,omitempty"`
	// true if the feed is private
	Private  bool     `protobuf:"varint,7,opt,name=private" json:"private,omitempty"`
	Commands []string `protobuf:"bytes,8,rep,name=commands" json:"commands,omitempty"`
	Entries  []*Entry `protobuf:"bytes,9,rep,name=entries" json:"entries,omitempty"`
	// TODO: remove this
	RemoteKey string `protobuf:"bytes,10,opt,name=remote_key" json:"remote_key,omitempty"`
}

func (m *Feed) Reset()         { *m = Feed{} }
func (m *Feed) String() string { return proto1.CompactTextString(m) }
func (*Feed) ProtoMessage()    {}

func (m *Feed) GetEntries() []*Entry {
	if m != nil {
		return m.Entries
	}
	return nil
}

// /feedinfo - Feed information
// Return information about the feed with the specified feed id:
//
// http://friendfeed-api.com/v2/feedinfo/feed id
//
// The response is a feed, plus the following fields:
//
// subscriptions[]? - The users and groups this feed is subscribed to
// subscribers[]? - The users subscribed to this feed
// admins[]{}? - For groups, the list of group administrators
// feeds[]? - For special feeds, the feeds that are contained within this feed. For example, for a friend list feed, this property lists all of the users/groups in the friend list.
// services[]{}? - Services associated with the feed (e.g., Twitter or an imported blog)
//   * id - the service's id, e.g., "picasa"
//   * name - the service's official name, e.g., "Picasa Web Albums"
//   * url - the official URL of the service, e.g., "http://picasaweb.google.com/"
//   * icon - the URL of the favicon for this service
//   * profile? - the profile URL for this service, if any
//   * username? - the username for this service, if any
type Feedinfo struct {
	// Feed
	Uuid    string `protobuf:"bytes,1,opt,name=uuid" json:"uuid,omitempty"`
	Id      string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Name    string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Picture string `protobuf:"bytes,16,opt,name=picture" json:"picture,omitempty"`
	// SUP (Simple Update Protocol)
	// https://code.google.com/p/simpleupdateprotocol/
	SupId       string `protobuf:"bytes,4,opt,name=sup_id" json:"sup_id,omitempty"`
	Description string `protobuf:"bytes,5,opt,name=description" json:"description,omitempty"`
	// One of "user", "group", or "special"
	Type string `protobuf:"bytes,6,opt,name=type" json:"type,omitempty"`
	// true if the feed is private
	Private  bool     `protobuf:"varint,7,opt,name=private" json:"private,omitempty"`
	Commands []string `protobuf:"bytes,8,rep,name=commands" json:"commands,omitempty"`
	Entries  []*Entry `protobuf:"bytes,9,rep,name=entries" json:"entries,omitempty"`
	// Feedinfo
	Subscribers   []*Profile `protobuf:"bytes,10,rep,name=subscribers" json:"subscribers,omitempty"`
	Subscriptions []*Profile `protobuf:"bytes,11,rep,name=subscriptions" json:"subscriptions,omitempty"`
	Admins        []*Profile `protobuf:"bytes,12,rep,name=admins" json:"admins,omitempty"`
	Feeds         []*Profile `protobuf:"bytes,13,rep,name=feeds" json:"feeds,omitempty"`
	Services      []*Service `protobuf:"bytes,14,rep,name=services" json:"services,omitempty"`
	// TODO: remove this
	RemoteKey string `protobuf:"bytes,15,opt,name=remote_key" json:"remote_key,omitempty"`
}

func (m *Feedinfo) Reset()         { *m = Feedinfo{} }
func (m *Feedinfo) String() string { return proto1.CompactTextString(m) }
func (*Feedinfo) ProtoMessage()    {}

func (m *Feedinfo) GetEntries() []*Entry {
	if m != nil {
		return m.Entries
	}
	return nil
}

func (m *Feedinfo) GetSubscribers() []*Profile {
	if m != nil {
		return m.Subscribers
	}
	return nil
}

func (m *Feedinfo) GetSubscriptions() []*Profile {
	if m != nil {
		return m.Subscriptions
	}
	return nil
}

func (m *Feedinfo) GetAdmins() []*Profile {
	if m != nil {
		return m.Admins
	}
	return nil
}

func (m *Feedinfo) GetFeeds() []*Profile {
	if m != nil {
		return m.Feeds
	}
	return nil
}

func (m *Feedinfo) GetServices() []*Service {
	if m != nil {
		return m.Services
	}
	return nil
}

// services[]{}? - Services associated with the feed (e.g., Twitter or an imported blog)
//   * id - the service's id, e.g., "picasa"
//   * name - the service's official name, e.g., "Picasa Web Albums"
//   * url - the official URL of the service, e.g., "http://picasaweb.google.com/"
//   * icon - the URL of the favicon for this service
//   * profile? - the profile URL for this service, if any
//   * username? - the username for this service, if any
type Service struct {
	Id       string     `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name     string     `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Icon     string     `protobuf:"bytes,3,opt,name=icon" json:"icon,omitempty"`
	Profile  string     `protobuf:"bytes,4,opt,name=profile" json:"profile,omitempty"`
	Username string     `protobuf:"bytes,5,opt,name=username" json:"username,omitempty"`
	Oauth    *OAuthUser `protobuf:"bytes,6,opt,name=oauth" json:"oauth,omitempty"`
	Created  int64      `protobuf:"varint,7,opt,name=created" json:"created,omitempty"`
	Updated  int64      `protobuf:"varint,8,opt,name=updated" json:"updated,omitempty"`
}

func (m *Service) Reset()         { *m = Service{} }
func (m *Service) String() string { return proto1.CompactTextString(m) }
func (*Service) ProtoMessage()    {}

func (m *Service) GetOauth() *OAuthUser {
	if m != nil {
		return m.Oauth
	}
	return nil
}

// Entry
// id - The FriendFeed entry id, used to add comments/likes to the entry
// url - URL of the entry page on the FriendFeed website.
// date - The date the entry was posted.
// body - The HTML body of the entry. URLs are turned into links. A best effort is made to resolve shortened URLs and use the final destination as the title of the link.
// from{} - The user or group who posted this entry, a feed object
// to[]{}? - List of feeds to which this entry was published, a list of feed objects
// comments[]{}? - list of comments ordered by date
// likes[]{}? - list of likes for this entry, ordered to present the authenticated user's friends first, and then all other other people who liked the entry
// thumbnails[]{}? - List of thumbnails
//   * url - Image URL
//   * link - The URL the thumbnail should link to
//   * width? - Image width
//   * height? - Image height
//   * player? - the player for this media file (e.g., the YouTube.com <embed> code)
// files[]{}? - List of files attached to this entry
//   * url - File URL
//   * type - File MIME type (e.g., "application/pdf")
//   * name - File name
//   * icon - URL of file type icon. Always 16x16.
//   * size? - File size in bytes
// via{}? - If present, the application or service that created the entry.
//   * name - The name of the entry source, e.g., "Google Reader", "Bookmarklet"
//   * url - URL of the entry source
// geo{}? - Present if the entry contains geographic information
//   * lat - The latitude
//   * long - The longitude
// commands[]? - List of allowed commands for the authenticated user: "comment", "like", "unlike", "edit", "delete", "hide", "unhide"
type Entry struct {
	// entry uuid with prefix: "e/"
	Id         string       `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Url        string       `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
	Date       string       `protobuf:"bytes,3,opt,name=date" json:"date,omitempty"`
	Body       string       `protobuf:"bytes,4,opt,name=body" json:"body,omitempty"`
	RawBody    string       `protobuf:"bytes,5,opt,name=rawBody" json:"rawBody,omitempty"`
	RawLink    string       `protobuf:"bytes,6,opt,name=rawLink" json:"rawLink,omitempty"`
	From       *Feed        `protobuf:"bytes,7,opt,name=from" json:"from,omitempty"`
	To         []*Feed      `protobuf:"bytes,8,rep,name=to" json:"to,omitempty"`
	Comments   []*Comment   `protobuf:"bytes,9,rep,name=comments" json:"comments,omitempty"`
	Likes      []*Like      `protobuf:"bytes,10,rep,name=likes" json:"likes,omitempty"`
	Thumbnails []*Thumbnail `protobuf:"bytes,11,rep,name=thumbnails" json:"thumbnails,omitempty"`
	Files      []*File      `protobuf:"bytes,12,rep,name=files" json:"files,omitempty"`
	Via        *Via         `protobuf:"bytes,13,opt,name=via" json:"via,omitempty"`
	Geo        *Location    `protobuf:"bytes,14,opt,name=geo" json:"geo,omitempty"`
	Commands   []string     `protobuf:"bytes,15,rep,name=commands" json:"commands,omitempty"`
	// custom filed
	// TODO: duplicated with from field
	ProfileUuid string `protobuf:"bytes,16,opt,name=profile_uuid" json:"profile_uuid,omitempty"`
}

func (m *Entry) Reset()         { *m = Entry{} }
func (m *Entry) String() string { return proto1.CompactTextString(m) }
func (*Entry) ProtoMessage()    {}

func (m *Entry) GetFrom() *Feed {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *Entry) GetTo() []*Feed {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *Entry) GetComments() []*Comment {
	if m != nil {
		return m.Comments
	}
	return nil
}

func (m *Entry) GetLikes() []*Like {
	if m != nil {
		return m.Likes
	}
	return nil
}

func (m *Entry) GetThumbnails() []*Thumbnail {
	if m != nil {
		return m.Thumbnails
	}
	return nil
}

func (m *Entry) GetFiles() []*File {
	if m != nil {
		return m.Files
	}
	return nil
}

func (m *Entry) GetVia() *Via {
	if m != nil {
		return m.Via
	}
	return nil
}

func (m *Entry) GetGeo() *Location {
	if m != nil {
		return m.Geo
	}
	return nil
}

// Comment
// id - The id of the comment
// date - The date the comment was posted.
// body - The HTML body of the comment. URLs are turned into links.
// from{} - The user or group who posted this comment, a feed object
// via{}? - present if comment was created by a third party application.
//   * name - the name of the application, e.g., "BuddyFeed"
//   * url - URL of the source, e.g., "http://www.codewalrus.com/buddyfeed/"
// commands[]? - List of allowed commands for the authenticated user: "edit", "delete"
type Comment struct {
	Id       string   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Date     string   `protobuf:"bytes,2,opt,name=date" json:"date,omitempty"`
	Body     string   `protobuf:"bytes,3,opt,name=body" json:"body,omitempty"`
	RawBody  string   `protobuf:"bytes,4,opt,name=rawBody" json:"rawBody,omitempty"`
	From     *Feed    `protobuf:"bytes,5,opt,name=from" json:"from,omitempty"`
	Via      *Via     `protobuf:"bytes,6,opt,name=via" json:"via,omitempty"`
	Commands []string `protobuf:"bytes,7,rep,name=commands" json:"commands,omitempty"`
	// when maxcomments=auto on feed
	Placeholder bool  `protobuf:"varint,8,opt,name=placeholder" json:"placeholder,omitempty"`
	Num         int32 `protobuf:"varint,9,opt,name=num" json:"num,omitempty"`
}

func (m *Comment) Reset()         { *m = Comment{} }
func (m *Comment) String() string { return proto1.CompactTextString(m) }
func (*Comment) ProtoMessage()    {}

func (m *Comment) GetFrom() *Feed {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *Comment) GetVia() *Via {
	if m != nil {
		return m.Via
	}
	return nil
}

// Like
// date
// from{} - The user who liked the parent entry.
type Like struct {
	Date string `protobuf:"bytes,1,opt,name=date" json:"date,omitempty"`
	From *Feed  `protobuf:"bytes,2,opt,name=from" json:"from,omitempty"`
	// when maxlikes=auto on feed
	Body        string `protobuf:"bytes,3,opt,name=body" json:"body,omitempty"`
	Placeholder bool   `protobuf:"varint,8,opt,name=placeholder" json:"placeholder,omitempty"`
	Num         int32  `protobuf:"varint,9,opt,name=num" json:"num,omitempty"`
}

func (m *Like) Reset()         { *m = Like{} }
func (m *Like) String() string { return proto1.CompactTextString(m) }
func (*Like) ProtoMessage()    {}

func (m *Like) GetFrom() *Feed {
	if m != nil {
		return m.From
	}
	return nil
}

// thumbnails - List of thumbnails
//   * url - Image URL
//   * link - The URL the thumbnail should link to
//   * width? - Image width
//   * height? - Image height
//   * player? - the player for this media file (e.g., the YouTube.com <embed> code)
type Thumbnail struct {
	Url    string `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	Link   string `protobuf:"bytes,2,opt,name=link" json:"link,omitempty"`
	Width  int32  `protobuf:"varint,3,opt,name=width" json:"width,omitempty"`
	Height int32  `protobuf:"varint,4,opt,name=height" json:"height,omitempty"`
	Player string `protobuf:"bytes,5,opt,name=player" json:"player,omitempty"`
}

func (m *Thumbnail) Reset()         { *m = Thumbnail{} }
func (m *Thumbnail) String() string { return proto1.CompactTextString(m) }
func (*Thumbnail) ProtoMessage()    {}

// File
// url - File URL
// type - File MIME type (e.g., "application/pdf")
// name - File name
// icon - URL of file type icon. Always 16x16.
// size? - File size in bytes
type File struct {
	Url  string `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	Type string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Name string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Icon string `protobuf:"bytes,4,opt,name=icon" json:"icon,omitempty"`
	Size int32  `protobuf:"varint,5,opt,name=size" json:"size,omitempty"`
}

func (m *File) Reset()         { *m = File{} }
func (m *File) String() string { return proto1.CompactTextString(m) }
func (*File) ProtoMessage()    {}

// Via
// name - the name of the application, e.g., "BuddyFeed"
// url - URL of the source, e.g., "http://www.codewalrus.com/buddyfeed/"
type Via struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Url  string `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
}

func (m *Via) Reset()         { *m = Via{} }
func (m *Via) String() string { return proto1.CompactTextString(m) }
func (*Via) ProtoMessage()    {}

// geographic information
type Location struct {
	Latitude  float64 `protobuf:"fixed64,1,opt,name=latitude" json:"latitude,omitempty"`
	Longitude float64 `protobuf:"fixed64,2,opt,name=longitude" json:"longitude,omitempty"`
}

func (m *Location) Reset()         { *m = Location{} }
func (m *Location) String() string { return proto1.CompactTextString(m) }
func (*Location) ProtoMessage()    {}

func init() {
	proto1.RegisterEnum("proto.FeedType", FeedType_name, FeedType_value)
	proto1.RegisterEnum("proto.StatusType", StatusType_name, StatusType_value)
}
